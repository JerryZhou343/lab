// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account/acct.proto

package acctsvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	account "github.com/mfslog/lab/kit/idl/account"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("account/acct.proto", fileDescriptor_aa0d05698cf0ada2) }

var fileDescriptor_aa0d05698cf0ada2 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0xd1, 0x4f, 0x4c, 0x4e, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x87, 0x8a, 0xe9, 0x81, 0xc4, 0x8a, 0xcb, 0x92, 0xa5, 0xf8, 0x40, 0x8c, 0xf8, 0x94, 0xd4, 0x34,
	0x88, 0x02, 0x23, 0x1f, 0x2e, 0x2e, 0x47, 0x88, 0x92, 0xe0, 0xb2, 0x64, 0x21, 0x3b, 0x2e, 0x2e,
	0xf7, 0xd4, 0x12, 0xa8, 0x80, 0x90, 0x98, 0x1e, 0x4c, 0x37, 0x42, 0x30, 0x28, 0xb5, 0x50, 0x0a,
	0xab, 0x78, 0x71, 0x81, 0x12, 0x83, 0x93, 0x60, 0x14, 0x3f, 0xb2, 0x23, 0x8a, 0xcb, 0x92, 0x93,
	0xd8, 0xc0, 0xf6, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x36, 0xee, 0x60, 0x9e, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountSvcClient is the client API for AccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountSvcClient interface {
	GetAccount(ctx context.Context, in *account.GetAccountReq, opts ...grpc.CallOption) (*account.GetAccountRsp, error)
}

type accountSvcClient struct {
	cc *grpc.ClientConn
}

func NewAccountSvcClient(cc *grpc.ClientConn) AccountSvcClient {
	return &accountSvcClient{cc}
}

func (c *accountSvcClient) GetAccount(ctx context.Context, in *account.GetAccountReq, opts ...grpc.CallOption) (*account.GetAccountRsp, error) {
	out := new(account.GetAccountRsp)
	err := c.cc.Invoke(ctx, "/account.acctsvc.AccountSvc/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSvcServer is the server API for AccountSvc service.
type AccountSvcServer interface {
	GetAccount(context.Context, *account.GetAccountReq) (*account.GetAccountRsp, error)
}

// UnimplementedAccountSvcServer can be embedded to have forward compatible implementations.
type UnimplementedAccountSvcServer struct {
}

func (*UnimplementedAccountSvcServer) GetAccount(ctx context.Context, req *account.GetAccountReq) (*account.GetAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}

func RegisterAccountSvcServer(s *grpc.Server, srv AccountSvcServer) {
	s.RegisterService(&_AccountSvc_serviceDesc, srv)
}

func _AccountSvc_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.acctsvc.AccountSvc/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).GetAccount(ctx, req.(*account.GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.acctsvc.AccountSvc",
	HandlerType: (*AccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _AccountSvc_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/acct.proto",
}
