// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: receivetime/receivetime.proto

package receivetime

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type GetCurrentTimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentTimeRequest) Reset()         { *m = GetCurrentTimeRequest{} }
func (m *GetCurrentTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrentTimeRequest) ProtoMessage()    {}
func (*GetCurrentTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f03dae895f0d11c, []int{0}
}
func (m *GetCurrentTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentTimeRequest.Merge(m, src)
}
func (m *GetCurrentTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentTimeRequest proto.InternalMessageInfo

// The response message containing the greetings
type GetCurrentTimeReply struct {
	CurrentAt            int64    `protobuf:"varint,1,opt,name=current_at,json=currentAt,proto3" json:"current_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCurrentTimeReply) Reset()         { *m = GetCurrentTimeReply{} }
func (m *GetCurrentTimeReply) String() string { return proto.CompactTextString(m) }
func (*GetCurrentTimeReply) ProtoMessage()    {}
func (*GetCurrentTimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f03dae895f0d11c, []int{1}
}
func (m *GetCurrentTimeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentTimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentTimeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentTimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentTimeReply.Merge(m, src)
}
func (m *GetCurrentTimeReply) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentTimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentTimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentTimeReply proto.InternalMessageInfo

func (m *GetCurrentTimeReply) GetCurrentAt() int64 {
	if m != nil {
		return m.CurrentAt
	}
	return 0
}

func init() {
	proto.RegisterType((*GetCurrentTimeRequest)(nil), "receivetime.GetCurrentTimeRequest")
	proto.RegisterType((*GetCurrentTimeReply)(nil), "receivetime.GetCurrentTimeReply")
}

func init() { proto.RegisterFile("receivetime/receivetime.proto", fileDescriptor_0f03dae895f0d11c) }

var fileDescriptor_0f03dae895f0d11c = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x4a, 0x4d, 0x4e,
	0xcd, 0x2c, 0x4b, 0x2d, 0xc9, 0xcc, 0x4d, 0xd5, 0x47, 0x62, 0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4,
	0x0b, 0x71, 0x23, 0x09, 0x29, 0x89, 0x73, 0x89, 0xba, 0xa7, 0x96, 0x38, 0x97, 0x16, 0x15, 0xa5,
	0xe6, 0x95, 0x84, 0x64, 0xe6, 0xa6, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x99, 0x70,
	0x09, 0xa3, 0x4b, 0x14, 0xe4, 0x54, 0x0a, 0xc9, 0x72, 0x71, 0x25, 0x43, 0xc4, 0xe2, 0x13, 0x4b,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x38, 0xa1, 0x22, 0x8e, 0x25, 0x46, 0x69, 0x5c, 0x5c,
	0x20, 0xb5, 0xc1, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x42, 0x11, 0x5c, 0x7c, 0xa8, 0x66, 0x08, 0x29,
	0xe9, 0x21, 0xbb, 0x07, 0xab, 0xcd, 0x52, 0x0a, 0x78, 0xd5, 0x14, 0xe4, 0x54, 0x2a, 0x31, 0x38,
	0xd9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e,
	0xcb, 0x31, 0x44, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x7b,
	0xa5, 0x16, 0x15, 0x55, 0x46, 0x65, 0xe4, 0x97, 0x1a, 0x9b, 0x18, 0xeb, 0xe7, 0x24, 0x26, 0xe9,
	0x67, 0x16, 0x97, 0x64, 0xe6, 0x23, 0x07, 0x45, 0x12, 0x1b, 0x38, 0x2c, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x03, 0x63, 0x5f, 0xb5, 0x2c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeServerClient is the client API for TimeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeServerClient interface {
	// Sends a greeting
	GetCurrentTime(ctx context.Context, in *GetCurrentTimeRequest, opts ...grpc.CallOption) (*GetCurrentTimeReply, error)
}

type timeServerClient struct {
	cc *grpc.ClientConn
}

func NewTimeServerClient(cc *grpc.ClientConn) TimeServerClient {
	return &timeServerClient{cc}
}

func (c *timeServerClient) GetCurrentTime(ctx context.Context, in *GetCurrentTimeRequest, opts ...grpc.CallOption) (*GetCurrentTimeReply, error) {
	out := new(GetCurrentTimeReply)
	err := c.cc.Invoke(ctx, "/receivetime.TimeServer/GetCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServerServer is the server API for TimeServer service.
type TimeServerServer interface {
	// Sends a greeting
	GetCurrentTime(context.Context, *GetCurrentTimeRequest) (*GetCurrentTimeReply, error)
}

// UnimplementedTimeServerServer can be embedded to have forward compatible implementations.
type UnimplementedTimeServerServer struct {
}

func (*UnimplementedTimeServerServer) GetCurrentTime(ctx context.Context, req *GetCurrentTimeRequest) (*GetCurrentTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTime not implemented")
}

func RegisterTimeServerServer(s *grpc.Server, srv TimeServerServer) {
	s.RegisterService(&_TimeServer_serviceDesc, srv)
}

func _TimeServer_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServerServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receivetime.TimeServer/GetCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServerServer).GetCurrentTime(ctx, req.(*GetCurrentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "receivetime.TimeServer",
	HandlerType: (*TimeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentTime",
			Handler:    _TimeServer_GetCurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receivetime/receivetime.proto",
}

func (m *GetCurrentTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrentTimeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentTimeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentTimeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentAt != 0 {
		i = encodeVarintReceivetime(dAtA, i, uint64(m.CurrentAt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReceivetime(dAtA []byte, offset int, v uint64) int {
	offset -= sovReceivetime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetCurrentTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCurrentTimeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentAt != 0 {
		n += 1 + sovReceivetime(uint64(m.CurrentAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReceivetime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReceivetime(x uint64) (n int) {
	return sovReceivetime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCurrentTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceivetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReceivetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReceivetime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReceivetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentTimeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceivetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentTimeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentTimeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAt", wireType)
			}
			m.CurrentAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceivetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReceivetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReceivetime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReceivetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReceivetime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReceivetime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceivetime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceivetime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReceivetime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReceivetime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReceivetime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReceivetime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReceivetime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReceivetime = fmt.Errorf("proto: unexpected end of group")
)
